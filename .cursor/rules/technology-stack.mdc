---
description:
globs:
alwaysApply: false
---
# Technology Stack - Sidebar Svelte Application

## Core Framework & Version Information

This project uses **Svelte 5.0.0** (latest stable release as of October 2024) with **SvelteKit 2.16.0**, representing the cutting-edge of Svelte development with significant architectural improvements.

## Complete Technology Stack Analysis

### Core Dependencies

#### Svelte Ecosystem
- **svelte: ^5.0.0** - Latest major release with revolutionary changes
  - **Key Features**: Runes ($state, $derived, $effect), snippets, improved reactivity
  - **Best Practice**: Use new rune-based reactivity instead of legacy $ reactive statements
  - **Migration**: Can run Svelte 4 components alongside Svelte 5 during transition
  - **Performance**: Up to 10x faster than previous versions with fine-grained reactivity

- **@sveltejs/kit: ^2.16.0** - Application framework
  - **Status**: Stable release compatible with Svelte 5
  - **Features**: File-based routing, SSR, static generation, API routes
  - **Best Practice**: Use new `$app/state` module instead of `$app/stores` for Svelte 5

- **@sveltejs/adapter-auto: ^6.0.0** - Universal deployment adapter
  - **Best Practice**: Automatically detects deployment platform
  - **Production Ready**: Mature and stable for most hosting providers

- **@sveltejs/vite-plugin-svelte: ^5.0.0** - Vite integration
  - **Compatibility**: Updated for Svelte 5 support
  - **Performance**: Leverages Vite's HMR and build optimizations

#### CSS Framework
- **tailwindcss: ^4.0.0** - Utility-first CSS framework (MAJOR UPDATE)
  - **Status**: Just released (January 2025) - bleeding edge
  - **Breaking Changes**: Complete rewrite with new engine
  - **Key Features**:
    - CSS-first configuration (no more tailwind.config.js)
    - Native cascade layers
    - Automatic content detection
    - 5x faster builds, 100x faster incremental builds
    - Built-in vendor prefixing and imports
  - **Best Practice**: Use `@import "tailwindcss"` instead of separate directives
  - **Risk**: Very new release - may have compatibility issues
  - **Recommendation**: Consider staying on 3.x for production until 4.0 stabilizes

- **@tailwindcss/vite: ^4.0.0** - First-party Vite plugin for Tailwind 4.0
  - **Performance**: Better than PostCSS plugin for Vite projects
  - **Features**: Tight integration with Vite's build process

- **@tailwindcss/forms: ^0.5.9** - Form styling plugin
- **@tailwindcss/typography: ^0.5.15** - Typography plugin

#### Build & Development Tools
- **vite: ^6.2.6** - Build tool and dev server
  - **Status**: Latest major version (very recent)
  - **Performance**: Excellent HMR and build speeds
  - **Ecosystem**: Mature plugin ecosystem

#### UI Components & Icons
- **bits-ui: ^2.8.8** - Headless UI components for Svelte
  - **Best Practice**: Provides accessible, unstyled components
  - **Compatibility**: Works well with Tailwind CSS styling

- **@lucide/svelte: ^0.515.0** - Lucide icon library for Svelte
  - **Alternative**: Consider Phosphor icons (also included)
  - **Best Practice**: Tree-shakeable, only imports used icons

- **phosphor-svelte: ^3.0.1** - Phosphor icon library alternative

#### Utility Libraries
- **clsx: ^2.1.1** - Conditional CSS class utility
  - **Best Practice**: Use for dynamic class composition
  - **Svelte 5**: Works well with new reactive patterns

- **tailwind-merge: ^3.3.1** - Merge Tailwind classes intelligently
  - **Use Case**: Prevents conflicting Tailwind classes
  - **Best Practice**: Essential for component libraries

- **tailwind-variants: ^1.0.0** - Create component variants
  - **Pattern**: Type-safe variant creation for components

#### Map Integration
- **svelte-maplibre-gl: ^1.0.0** - MapLibre GL integration for Svelte
  - **Best Practice**: Use for interactive maps
  - **Performance**: Hardware-accelerated rendering
  - **Compatibility**: Works with Svelte 5 stores and reactivity

#### Data Processing
- **arquero: ^8.0.3** - Data transformation library
  - **Use Case**: DataFrame-like operations in JavaScript
  - **Best Practice**: Powerful for data analysis and manipulation

#### Development Experience
- **tw-animate-css: ^1.3.4** - Animation utilities for Tailwind
- **vite-plugin-devtools-json: ^0.2.0** - Development tooling

## Version Strategy & Risk Assessment

### High-Risk Dependencies (Bleeding Edge)
1. **Svelte 5.0.0**: Major rewrite, use cautiously in production
2. **TailwindCSS 4.0.0**: Just released, significant breaking changes
3. **Vite 6.x**: Very recent major version

### Stable Dependencies
1. **SvelteKit 2.x**: Mature and production-ready
2. **MapLibre GL**: Stable mapping solution
3. **Utility libraries**: All well-established

## Best Practices & Recommendations

### Svelte 5 Migration Strategy
```javascript
// Old Svelte 4 pattern
let count = 0;
$: doubled = count * 2;

// New Svelte 5 pattern
let count = $state(0);
let doubled = $derived(count * 2);
```

### Tailwind 4.0 Migration Considerations
```css
/* Old approach */
@tailwind base;
@tailwind components;
@tailwind utilities;

/* New Tailwind 4.0 approach */
@import "tailwindcss";

@theme {
  --color-primary: oklch(0.84 0.18 117.33);
  --font-sans: "Inter", sans-serif;
}
```

### Production Readiness Recommendations

#### For Production Use:
- Consider using Svelte 4.x until 5.0 ecosystem matures
- Use Tailwind 3.x for stability (4.0 is very new)
- Vite 5.x might be safer than 6.x for critical projects

#### For Development/Learning:
- Current stack is excellent for exploring latest features
- Perfect for prototyping and modern development practices
- Great for staying ahead of the curve

### Performance Considerations
- Svelte 5 offers significant performance improvements
- Tailwind 4.0 build performance is dramatically better
- MapLibre GL requires WebGL support
- Consider bundle size with icon libraries

### Browser Support
- Svelte 5: Modern browsers (ES2022+)
- Tailwind 4.0: Uses modern CSS features, may need fallbacks
- MapLibre GL: WebGL-capable browsers
- Overall: Targets modern browser baseline

## Development Workflow Recommendations

1. **Use TypeScript**: Project has TypeScript support configured
2. **Leverage Svelte 5 Features**: Embrace runes for better reactivity
3. **Component Strategy**: Use bits-ui for accessible base components
4. **Styling Strategy**: Combine Tailwind utilities with component variants
5. **State Management**: Use Svelte 5 stores and runes instead of external state libraries
6. **Map Integration**: Leverage reactive stores for map state management

## Future Upgrade Path

- Monitor Svelte 5.x patch releases for bug fixes
- Watch Tailwind 4.x for stability improvements
- Consider SvelteKit 3.x when available
- Evaluate new Svelte 5 ecosystem packages as they mature
